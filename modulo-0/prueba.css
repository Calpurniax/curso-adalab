/* li {
    background-color: aquamarine;
    display: inline;
}
.header .link {
    padding: 15px;
} */
/* cuando tienes un link es interesante agrandar el espacio en el que se puede hacer click, sobre todo por tema móvil por eso el padding es interesante. al ser inline no podemos poner espacio por arriba o por abajo, ni con padding ni con margin. Podemos trampear los margenes de los otros elementos que hay
*/ 
li {
    background-color: aquamarine;
    display: inline-block;
    width: 200px;
} 
 /* esta es otra opción para hacer cajitas  */

 .header .link {
    padding: 15px;
    display: block;
    text-decoration: none;
    color: black;
 }
 /* aqui al ponerle block ya podriamos ponerle margenes y demás, pero quedan en linea porque lo pone en li */

 .hero {
    background-image: url(/tinified/grande.jpg);
    background-position: center;
    background-size: 100%;
    
 }
 .hero .title {
    color: bisque;
    font-size: 30px;
    width: 50%;
    padding: 100px;
 }
.title span {
    color: aqua;
}
.primer-bloque {
    background-color: red;
    width: 10%;
    padding: 25px;
    position: absolute;
    top: -50px; left: 50%;
    transform: translate(-50%,0);
    display: none;
    
}
.contenedor {
    background-color: gainsboro;
    margin: auto;
    width: 300px;
    min-height: 10px;
    position: absolute;
    top: 60px; 
    padding: 35px;
    display: none;
}

body{margin:0;}
.wrapper{
  height: 100vh;
  display: grid;
  grid-template-columns: repeat (12, 1fr); /*para no poner 12 veces 1fr*/
  grid-template-rows: 20vh 80vh 20vh;
  grid-gap: 0px;
}
/*existe la posibilidad de darle tamaño fijo de pixeles a las columnas, pero no se usa, también puedes darle más tamaño al grid que a los objetos de tal maenera que haya un espacio entre ellos. También puede especificarse que una columna es el doble de grande poniendo: repeat (3, 1fr) 2fr Ahí saldrían 4 columnas, 3"sencillas" y una el doble de grande
las filas no se usan ni fr ni pixeles.Normalmente se usa auto o vh o %, con pixeles no será flexible. Puedes decirle a una auto (es ajustará al tamaño del contenido) y a la segunda le puedes decir que 20rem o lo q sea.
*/
.item{
  background: deeppink;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  text-transform: uppercase;
}
.item1 {
    grid-column: span 12;
    background-color: lightpink;
}
.item2 {
    grid-column: span 5;
    background-color: purple;
}
.item3 {
    grid-column: span 7;
    background-color: coral;
}
.item4 {
    grid-column: span 12;
    background-color: lightblue;
}
/* se puede hacer un grid en base a llamar a un contenedor header y etc y luego poner en grid-template-areas: 'header header header' y en el objeto poner grid-area:header. De esta forma ocuparía 3 filas.*/